import{E as ie,u as oe,r as h,l as ne,p as k,q as se,y as re}from"./Z3C1zjOC.js";import{u as le,s as G,I as ue}from"./D6bpf8h9.js";import{u as de}from"./aBfGhltR.js";import{u as ce}from"./6yrW6Ic0.js";const T=()=>ie().public.apiUrl||"http://localhost:3001/api",A=()=>{const r=localStorage.getItem("AUTH_TOKEN");return r?{Authorization:`Bearer ${r}`}:{}},W={create(r){return $fetch("/sensor-readings",{method:"POST",body:r,baseURL:T(),headers:A()})},delete(r){return $fetch(`/sensor-readings/${r}`,{method:"DELETE",baseURL:T(),headers:A()})},getSensorReadingsByDeviceId(r){return $fetch(`/sensor-readings/device/${r}`,{method:"GET",baseURL:T(),headers:A()})},getLatestSensorReadingByDeviceId(r){return $fetch(`/sensor-readings/device/${r}/latest`,{method:"GET",baseURL:T(),headers:A()})},getLatestSensorReadingForActiveDevice(r){return $fetch(`/sensor-readings/user/${r}/active-device/latest`,{method:"GET",baseURL:T(),headers:A()})},getSensorReadingsByDateRange(r,D){return $fetch(`/sensor-readings/date-range/${r}/${D}`,{method:"GET",baseURL:T(),headers:A()})},getSensorReadingsOutOfThreshold(){return $fetch("/sensor-readings/threshold/out-of-range",{method:"GET",baseURL:T(),headers:A()})}};function ye(){const r=de(),D=oe(),z=ce(),P=le(),d=h({temperatureMax:28,humidityMin:40,humidityMax:80}),g=h({labels:[],datasets:[{label:"Temperatura",data:[],borderColor:"#ef4444",backgroundColor:"rgba(239, 68, 68, 0.1)",borderWidth:3,tension:.6,fill:!0,pointBackgroundColor:"#ef4444",pointBorderColor:"#ffffff",pointBorderWidth:3,pointRadius:5,pointHoverRadius:8},{label:"Umbral Máximo",data:[],borderColor:"#fbbf24",backgroundColor:"transparent",borderWidth:3,borderDash:[10,5],pointRadius:0,fill:!1,tension:0}]}),v=h({labels:[],datasets:[{label:"Humedad",data:[],borderColor:"#3b82f6",backgroundColor:"rgba(59, 130, 246, 0.1)",borderWidth:3,tension:.6,fill:!0,pointBackgroundColor:"#3b82f6",pointBorderColor:"#ffffff",pointBorderWidth:3,pointRadius:5,pointHoverRadius:8},{label:"Umbral Mínimo",data:[],borderColor:"#60a5fa",backgroundColor:"transparent",borderWidth:3,borderDash:[10,5],pointRadius:0,fill:!1,tension:0},{label:"Umbral Máximo",data:[],borderColor:"#1d4ed8",backgroundColor:"transparent",borderWidth:3,borderDash:[5,10],pointRadius:0,fill:!1,tension:0}]}),b=h({labels:[],datasets:[{label:"Humedad Ambiental",data:[],borderColor:"#22d3ee",backgroundColor:"rgba(34,211,238,0.1)",borderWidth:3,tension:.6,fill:!0,pointBackgroundColor:"#22d3ee",pointBorderColor:"#ffffff",pointBorderWidth:3,pointRadius:5,pointHoverRadius:8}]}),f=h(25),y=h(65),p=h(70),C=h({value:0,direction:"neutral"}),x=h({value:0,direction:"neutral"}),S=h({value:0,direction:"neutral"});let $=null;const I=20,M=h([]),R=h(!1),U=()=>{var e,t;return((e=r.activeDevices)==null?void 0:e.find(a=>a.isActive))||((t=r.devices)==null?void 0:t.find(a=>a.is_active_communication))||null},Y=async()=>{if(D.isDemoMode||P.activeMode!=="automatic")return;if(R.value){console.log("⏸️ [AUTO] Evaluación ya en progreso, saltando...");return}const e=z.crops.find(a=>a.selected);if(!(!e||!U())){R.value=!0;try{let a=null;try{const s=await ue.getAutomaticConfigStatus(D.user.id);s.success&&(a=s.data)}catch{console.log("ℹ️ [AUTO] No hay configuración automática preparada"),R.value=!1;return}if(!a){console.log("ℹ️ [AUTO] No hay configuración preparada"),R.value=!1;return}const n=a.is_active&&a.pump_status==="active",i={maxTemperature:e.temperature_max,minSoilHumidity:e.soil_humidity_min,maxSoilHumidity:e.soil_humidity_max,minAirHumidity:e.air_humidity_min,maxAirHumidity:e.air_humidity_max};if(n){const s=f.value<=i.maxTemperature,u=y.value>=i.minSoilHumidity&&y.value<=i.maxSoilHumidity,l=p.value>=i.minAirHumidity,o=s&&u&&l;console.log("🤖 [AUTO] Evaluando DESACTIVACIÓN:",{temperature:`${f.value}°C <= ${i.maxTemperature}°C = ${s}`,soil:`${y.value}% (${i.minSoilHumidity}%-${i.maxSoilHumidity}%) = ${u}`,air:`${p.value}% >= ${i.minAirHumidity}% = ${l}`,shouldDeactivate:o,currentlyActive:!0}),o&&(console.log("🔴 [AUTO] ¡Todas las condiciones son óptimas detectadas!"),console.log("ℹ️ [AUTO] La desactivación será manejada por el backend automático vía TTN webhook"))}else{const s=f.value>i.maxTemperature,u=y.value<=i.minSoilHumidity,l=p.value<i.minAirHumidity,o=s||u||l;console.log("🤖 [AUTO] Evaluando ACTIVACIÓN:",{temp:`${f.value}°C > ${i.maxTemperature}°C = ${s}`,soil:`${y.value}% <= ${i.minSoilHumidity}% = ${u}`,air:`${p.value}% < ${i.minAirHumidity}% = ${l}`,shouldActivate:o,currentlyActive:!1}),o&&(console.log("🚨 [AUTO] ¡Condiciones de riego cumplidas detectadas!"),console.log("ℹ️ [AUTO] La activación será manejada por el backend automático vía TTN webhook"))}}catch(a){console.error("❌ Error evaluando condiciones automáticas:",a)}finally{setTimeout(()=>{R.value=!1},2e3)}}},j=()=>{const t=new Date().getHours(),a=Math.sin((t-6)*Math.PI/12)*5,n=(Math.random()-.5)*3,i=25+a+n;return Math.max(18,Math.min(35,i))},q=()=>{const t=new Date().getHours(),a=Math.cos((t-6)*Math.PI/12)*10,n=(Math.random()-.5)*8,i=65+a+n;return Math.max(30,Math.min(90,i))},K=()=>{const a=70+(Math.random()-.5)*10;return Math.max(20,Math.min(100,a))},O=e=>e.toLocaleTimeString("es-ES",{hour:"2-digit",minute:"2-digit",second:"2-digit"}),J=e=>{const t=new Date(e);return O(t)},Q=()=>{C.value={value:"0.0",direction:"neutral"},x.value={value:"0.0",direction:"neutral"},S.value={value:"0.0",direction:"neutral"},console.log("🔄 Trends initialized to neutral")},B=(e,t,a,n,i,s)=>{console.log("🔄 Calculating trends with:",{currentTemp:e,previousTemp:t,currentSoilHum:a,previousSoilHum:n,currentAirHum:i,previousAirHum:s});const u=.1,l=.5;if(t!==null&&!isNaN(t)&&!isNaN(e)){const o=e-t;console.log("🌡️ Temperature calculation:",{current:e,previous:t,change:o,absChange:Math.abs(o),threshold:u}),Math.abs(o)>=u?C.value={value:Math.abs(o).toFixed(1),direction:o>0?"up":"down"}:C.value={value:"0.0",direction:"neutral"},console.log("🌡️ Temperature trend result:",C.value)}else C.value={value:"0.0",direction:"neutral"},console.log("🌡️ Temperature trend: No valid previous data, set to neutral");if(n!==null&&!isNaN(n)&&!isNaN(a)){const o=a-n;console.log("💧 Soil Humidity calculation:",{current:a,previous:n,change:o,absChange:Math.abs(o),threshold:l}),Math.abs(o)>=l?x.value={value:Math.abs(o).toFixed(1),direction:o>0?"up":"down"}:x.value={value:"0.0",direction:"neutral"},console.log("💧 Soil Humidity trend result:",x.value)}else x.value={value:"0.0",direction:"neutral"},console.log("💧 Soil Humidity trend: No valid previous data, set to neutral");if(s!==null&&!isNaN(s)&&!isNaN(i)){const o=i-s;Math.abs(o)>=.5?S.value={value:Math.abs(o).toFixed(1),direction:o>0?"up":"down"}:S.value={value:"0.0",direction:"neutral"}}else S.value={value:"0.0",direction:"neutral"}},X=async()=>{if(D.isDemoMode)return;const e=U();if(!e){console.log("⚠️ No hay dispositivo activo para cargar datos");return}try{console.log("🔄 Cargando datos reales del dispositivo:",e.id);const t=await W.getSensorReadingsByDeviceId(e.id);if(t.success&&t.data&&t.data.length>0){const a=t.data.sort((n,i)=>new Date(n.received_at)-new Date(i.received_at)).slice(-I);M.value=a,F(a),console.log("✅ Datos reales cargados:",a.length,"puntos")}else console.log("⚠️ No hay datos de sensores para este dispositivo"),M.value=[]}catch(t){console.error("❌ Error cargando datos reales:",t)}},Z=async()=>{if(D.isDemoMode)return;const e=U();if(e)try{const t=await W.getLatestSensorReadingByDeviceId(e.id);if(t.success&&t.data){const a=t.data,n=M.value[M.value.length-1];(!n||new Date(a.received_at)>new Date(n.received_at))&&(console.log("📊 Nuevo dato encontrado:",a),M.value.push(a),M.value.length>I&&M.value.shift(),F(M.value),await Y())}}catch(t){console.error("❌ Error verificando nuevos datos:",t)}},F=e=>{if(e.length===0)return;const t=e.map(c=>J(c.received_at)),a=e.map(c=>Number(c.temperature||0)),n=e.map(c=>Number(c.soil_humidity||0)),i=e.map(c=>Number(c.air_humidity||0)),s=Math.min(...a,d.value.temperatureMax),u=Math.max(...a,d.value.temperatureMax),l=Math.min(...n,d.value.humidityMin,d.value.humidityMax),o=Math.max(...n,d.value.humidityMin,d.value.humidityMax),N=u-s,H=o-l,w=N*.1,_=H*.1,m=e[e.length-1];if(f.value,y.value,p.value,f.value=Number(m.temperature||0),y.value=Number(m.soil_humidity||0),p.value=Number(m.air_humidity||0),e.length>1){const c=e[e.length-2];console.log("📊 Data points for trend calculation:",{currentPoint:{temperature:m.temperature,soil_humidity:m.soil_humidity,air_humidity:m.air_humidity,received_at:m.received_at},previousPoint:{temperature:c.temperature,soil_humidity:c.soil_humidity,air_humidity:c.air_humidity,received_at:c.received_at}}),B(Number(m.temperature||0),Number(c.temperature||0),Number(m.soil_humidity||0),Number(c.soil_humidity||0),Number(m.air_humidity||0),Number(c.air_humidity||0))}else console.log("📊 First data point, initializing trends"),Q();g.value={...g.value,labels:[...t],datasets:[{...g.value.datasets[0],data:[...a]},{...g.value.datasets[1],data:new Array(t.length).fill(d.value.temperatureMax)}],yAxisConfig:{min:Math.max(0,s-w),max:u+w}},v.value={...v.value,labels:[...t],datasets:[{...v.value.datasets[0],data:[...n]},{...v.value.datasets[1],data:new Array(t.length).fill(d.value.humidityMin)},{...v.value.datasets[2],data:new Array(t.length).fill(d.value.humidityMax)}],yAxisConfig:{min:Math.max(0,l-_),max:Math.min(100,o+_)}},b.value={...b.value,labels:[...t],datasets:[{...b.value.datasets[0],data:[...i]}]},console.log("✅ Humidity data updated:",{labels:t.length,soilHumidityValues:n.length,latestSoilHumidity:n[n.length-1],airHumidityValues:i.length,latestAirHumidity:i[i.length-1],thresholds:{min:d.value.humidityMin,max:d.value.humidityMax},yAxisRange:{min:Math.max(0,l-_),max:Math.min(100,o+_)}}),console.log("✅ Gráficas actualizadas con datos reales")},V=()=>{console.log("🔄 Adding new data point at:",new Date().toLocaleTimeString());const t=O(new Date),a=f.value,n=y.value,i=p.value,s=j(),u=q(),l=K();console.log(`📊 New values - Temp: ${s.toFixed(1)}°C, SoilHum: ${u.toFixed(1)}%, AirHum: ${l.toFixed(1)}%`),f.value=Number(s.toFixed(1)),y.value=Number(u.toFixed(1)),p.value=Number(l.toFixed(1)),B(s,a,u,n,l,i);const o=[...g.value.labels,t],N=[...g.value.datasets[0].data,s],H=[...v.value.labels,t],w=[...v.value.datasets[0].data,u],_=[...b.value.labels,t],m=[...b.value.datasets[0].data,l];o.length>I&&(o.shift(),N.shift()),H.length>I&&(H.shift(),w.shift(),m.shift()),g.value={...g.value,labels:o,datasets:[{...g.value.datasets[0],data:N},{...g.value.datasets[1],data:new Array(o.length).fill(d.value.temperatureMax)}]},v.value={...v.value,labels:H,datasets:[{...v.value.datasets[0],data:w},{...v.value.datasets[1],data:new Array(H.length).fill(d.value.humidityMin)},{...v.value.datasets[2],data:new Array(H.length).fill(d.value.humidityMax)}]},b.value={...b.value,labels:_,datasets:[{...b.value.datasets[0],data:m}]},console.log("✅ Data updated - Temp points:",N.length,"SoilHum points:",w.length,"AirHum points:",m.length)},E=async()=>{if(D.isDemoMode){console.log("🚀 Starting IoT simulation...");for(let e=0;e<5;e++)setTimeout(()=>{V()},e*300);$=G(()=>{V()},3e3),console.log("⏰ Interval set for every 3 seconds")}else console.log("🚀 Starting real data monitoring..."),await X(),$=G(()=>{Z()},5e3),console.log("⏰ Real data monitoring started")},L=()=>{$&&(clearInterval($),$=null,console.log("⏹️ Simulation stopped"))};ne(()=>r.devices,async()=>{D.isDemoMode||(console.log("🔄 Dispositivos cambiaron, recargando datos..."),L(),await E())},{deep:!0});const ee=k(()=>`${f.value}°C`),te=k(()=>`${y.value}%`),ae=k(()=>`${p.value}%`);return se(async()=>{console.log("🎯 Composable mounted, starting simulation..."),await E()}),re(()=>{console.log("🎯 Composable unmounted, stopping simulation..."),L()}),{temperatureData:g,soilHumidityData:v,airHumidityData:b,currentTemperature:f,currentSoilHumidity:y,currentAirHumidity:p,temperatureTrend:C,soilHumidityTrend:x,airHumidityTrend:S,cropThresholds:d,formattedTemperature:ee,formattedSoilHumidity:te,formattedAirHumidity:ae,realDataPoints:M,startSimulation:E,stopSimulation:L}}export{ye as u};
